generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  name                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  emailVerified         Boolean                 @default(false)
  image                 String?                 @db.Text
  banExpires            DateTime?
  banReason             String?                 @db.Text
  banned                Boolean?                @default(false)
  role                  Role                    @default(USER)
  Account               Account[]
  pages                 Page[]
  quizSubmissions       QuizSubmission[]
  Session               Session[]
  passwordResetRequests PasswordResetRequest[]

  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  ipAddress      String?  @db.VarChar(45)
  userAgent      String?  @db.Text
  userId         String
  createdAt      DateTime @default(now())
  impersonatedBy String?
  token          String   @unique @db.VarChar(255)
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  expiresAt             DateTime?
  password              String?   @db.Text
  accessTokenExpiresAt  DateTime?
  createdAt             DateTime  @default(now())
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String    @db.VarChar(255)
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([identifier])
  @@map("verification")
}

model Post {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  title_sl    String?   @db.VarChar(255)
  title_hr    String?   @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  content     String    @db.Text
  content_sl  String?   @db.Text
  content_hr  String?   @db.Text
  excerpt     String?   @db.Text
  excerpt_sl  String?   @db.Text
  excerpt_hr  String?   @db.Text
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  coverId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String?
  authorName  String    @default("Admin") @db.VarChar(255)
  cover       Media?    @relation(fields: [coverId], references: [id])
  Project     Project?  @relation(fields: [projectId], references: [id])

  @@index([slug])
  @@index([projectId])
  @@map("post")
}

model Page {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  title_sl    String?   @db.VarChar(255)
  title_hr    String?   @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  content     String    @db.Text
  content_sl  String?   @db.Text
  content_hr  String?   @db.Text
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mediaId     String?
  projectId   String?
  author      User      @relation(fields: [authorId], references: [id])
  Media       Media?    @relation(fields: [mediaId], references: [id])
  parent      Page?     @relation("PageToPage", fields: [parentId], references: [id])
  children    Page[]    @relation("PageToPage")
  Project     Project?  @relation(fields: [projectId], references: [id])

  @@index([slug])
  @@index([authorId])
  @@map("page")
}

model Media {
  id               String                     @id @default(uuid())
  filename         String                     @db.VarChar(255)
  url              String                     @db.Text
  mimeType         String                     @db.VarChar(100)
  size             Int
  type             MediaType                  @default(OTHER)
  alt              String?                    @db.Text
  alt_sl           String?                    @db.Text
  alt_hr           String?                    @db.Text
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  projectId        String?
  Project          Project?                   @relation(fields: [projectId], references: [id])
  pages            Page[]
  posts            Post[]
  projectHero      Project[]                  @relation("ProjectHero")
  teachers         Teacher[]
  testimonials     Testimonial[]
  projectGallery   ProjectToGallery[]
  activities       ProjectActivityToMedia[]

  @@index([projectId])
  @@map("media")
}

model Material {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(255)
  title_sl       String?      @db.VarChar(255)
  title_hr       String?      @db.VarChar(255)
  description    String?      @db.Text
  description_sl String?      @db.Text
  description_hr String?      @db.Text
  type           MaterialType @default(OTHER)
  url            String       @db.Text
  filename       String       @db.VarChar(255)
  fileKey        String       @db.VarChar(255)
  size           Int
  downloads      Int          @default(0)
  published      Boolean      @default(true)
  category       String?      @db.VarChar(100)
  category_sl    String?      @db.VarChar(100)
  category_hr    String?      @db.VarChar(100)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  language       String       @default("en") @db.VarChar(10)
  activities     ProjectActivityToMaterial[]

  @@index([type])
  @@index([category])
  @@map("material")
}

model Teacher {
  id           String                        @id @default(uuid())
  name         String                        @db.VarChar(255)
  title        String?                       @db.VarChar(255)
  title_sl     String?                       @db.VarChar(255)
  title_hr     String?                       @db.VarChar(255)
  bio          String?                       @db.Text
  bio_sl       String?                       @db.Text
  bio_hr       String?                       @db.Text
  photoId      String?
  email        String?                       @db.VarChar(255)
  displayOrder Int                           @default(0)
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  school       String?                       @db.VarChar(255)
  quizzes      Quiz[]
  photo        Media?                        @relation(fields: [photoId], references: [id])
  projects     TeacherToProject[]
  activities   ProjectActivityToTeacher[]

  @@map("teacher")
}

model Quiz {
  id             String           @id @default(uuid())
  title          String           @db.VarChar(255)
  title_sl       String?          @db.VarChar(255)
  title_hr       String?          @db.VarChar(255)
  description    String?          @db.Text
  description_sl String?          @db.Text
  description_hr String?          @db.Text
  teacherId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  projectId      String?
  questions      Question[]
  Project        Project?         @relation(fields: [projectId], references: [id])
  teacher        Teacher          @relation(fields: [teacherId], references: [id])
  submissions    QuizSubmission[]

  @@index([teacherId])
  @@index([projectId])
  @@map("quiz")
}

model Question {
  id              String   @id @default(uuid())
  text            String   @db.Text
  text_sl         String?  @db.Text
  text_hr         String?  @db.Text
  quizId          String
  correctOptionId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  options         Option[] @relation("QuestionOptions")
  correctOption   Option?  @relation("CorrectAnswer", fields: [correctOptionId], references: [id])
  quiz            Quiz     @relation(fields: [quizId], references: [id])

  @@index([quizId])
  @@map("question")
}

model Option {
  id                    String    @id @default(uuid())
  text                  String    @db.Text
  text_sl               String?   @db.Text
  text_hr               String?   @db.Text
  questionId            String
  correct               Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  question              Question  @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  correctAnswerQuestion Question? @relation("CorrectAnswer")

  @@index([questionId])
  @@map("option")
}

model QuizSubmission {
  id        String   @id @default(uuid())
  quizId    String
  userId    String
  score     Float
  answers   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([quizId])
  @@index([userId])
  @@map("quiz_submission")
}

model Project {
  id             String            @id @default(uuid())
  name           String            @db.VarChar(255)
  name_sl        String?           @db.VarChar(255)
  name_hr        String?           @db.VarChar(255)
  slug           String            @unique @db.VarChar(255)
  description    String?           @db.Text
  description_sl String?           @db.Text
  description_hr String?           @db.Text
  published      Boolean           @default(false)
  publishedAt    DateTime?
  featured       Boolean           @default(false)
  heroImageId    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  Media          Media[]
  pages          Page[]
  posts          Post[]
  heroImage      Media?            @relation("ProjectHero", fields: [heroImageId], references: [id])
  timeline       ProjectPhase[]
  quizzes        Quiz[]
  gallery        ProjectToGallery[]
  teachers       TeacherToProject[]

  @@index([slug])
  @@map("project")
}

model ProjectPhase {
  id             String            @id @default(uuid())
  title          String            @db.VarChar(255)
  title_sl       String?           @db.VarChar(255)
  title_hr       String?           @db.VarChar(255)
  startDate      DateTime?
  endDate        DateTime?
  completed      Boolean           @default(false)
  order          Int
  projectId      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  activities     ProjectActivity[]

  @@index([projectId])
  @@map("project_phase")
}

model Testimonial {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(255)
  role       String   @db.VarChar(255)
  role_sl    String?  @db.VarChar(255)
  role_hr    String?  @db.VarChar(255)
  content    String   @db.Text
  content_sl String?  @db.Text
  content_hr String?  @db.Text
  photoId    String?
  featured   Boolean  @default(false)
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  photo      Media?   @relation(fields: [photoId], references: [id])

  @@map("testimonial")
}

model ProjectActivity {
  id             String                        @id @default(uuid())
  title          String                        @db.VarChar(255)
  title_sl       String?                       @db.VarChar(255)
  title_hr       String?                       @db.VarChar(255)
  description    String                        @db.Text
  description_sl String?                       @db.Text
  description_hr String?                       @db.Text
  order          Int                           @default(0)
  phase          ProjectPhase                  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId        String
  teachers       ProjectActivityToTeacher[]
  images         ProjectActivityToMedia[]
  materials      ProjectActivityToMaterial[]
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt
  
  @@index([phaseId])
  @@map("project_activity")
}

// Junction table for Project to Teacher many-to-many relationship
model TeacherToProject {
  id        String   @id @default(uuid())
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([teacherId, projectId])
  @@map("teacher_to_project")
}

// Junction table for Project to Media gallery many-to-many relationship
model ProjectToGallery {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   String
  createdAt DateTime @default(now())

  @@unique([projectId, mediaId])
  @@map("project_to_gallery")
}

// Junction table for ProjectActivity to Teacher many-to-many relationship
model ProjectActivityToTeacher {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  teacher    Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  String
  createdAt  DateTime        @default(now())

  @@unique([activityId, teacherId])
  @@map("project_activity_to_teacher")
}

// Junction table for ProjectActivity to Media many-to-many relationship
model ProjectActivityToMedia {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  media      Media           @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId    String
  createdAt  DateTime        @default(now())

  @@unique([activityId, mediaId])
  @@map("project_activity_to_media")
}

// Junction table for ProjectActivity to Material many-to-many relationship
model ProjectActivityToMaterial {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  material   Material        @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId String
  createdAt  DateTime        @default(now())

  @@unique([activityId, materialId])
  @@map("project_activity_to_material")
}

model PasswordResetRequest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, COMPLETED, EXPIRED
  reason      String?  @db.Text
  requestedAt DateTime @default(now())
  processedAt DateTime?
  processedBy String?
  adminNotes  String?  @db.Text
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("password_reset_request")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum MediaType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum MaterialType {
  PDF
  WORD
  EXCEL
  POWERPOINT
  OTHER
}