// This is your Prisma schema file with multilingual support

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// Datasource configuration for PostgreSQL

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// User model for authentication and user management

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emailVerified   Boolean
  image           String?
  role            Role             @default(USER)
  Session         Session[]
  Account         Account[]
  pages           Page[]
  quizSubmissions QuizSubmission[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

// Session model for user sessions

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

// Account model for third-party account linking

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

// Verification model for email or action verification

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

// Role enumeration for user roles

enum Role {
  USER
  ADMIN
  TEACHER
}

// Post model for blog posts

model Post {
  id          String     @id @default(uuid())
  title       String // Primary language (English)
  title_sl    String? // Slovenian
  title_hr    String? // Croatian
  slug        String     @unique
  content     String     @db.Text // Primary language (English)
  content_sl  String?    @db.Text // Slovenian
  content_hr  String?    @db.Text // Croatian
  excerpt     String?    @db.Text // Primary language (English)
  excerpt_sl  String?    @db.Text // Slovenian
  excerpt_hr  String?    @db.Text // Croatian
  featured    Boolean    @default(false)
  published   Boolean    @default(false)
  publishedAt DateTime?
  authorName  String     @default("Admin")
  cover       Media?     @relation(fields: [coverId], references: [id])
  coverId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?

  @@map("post")
}

// Page model for static pages

model Page {
  id          String    @id @default(uuid())
  title       String // Primary language (English)
  title_sl    String? // Slovenian
  title_hr    String? // Croatian
  slug        String    @unique
  content     String    @db.Text // Primary language (English)
  content_sl  String?   @db.Text // Slovenian
  content_hr  String?   @db.Text // Croatian
  published   Boolean   @default(false)
  publishedAt DateTime?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  parent      Page?     @relation("PageToPage", fields: [parentId], references: [id])
  parentId    String?
  children    Page[]    @relation("PageToPage")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Media       Media?    @relation(fields: [mediaId], references: [id])
  mediaId     String?
  Project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?

  @@map("page")
}

// Media model for handling images, documents, etc.

enum MediaType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

model Media {
  id             String         @id @default(uuid())
  filename       String
  url            String
  mimeType       String
  size           Int
  type           MediaType      @default(OTHER)
  alt            String? // Primary language (English)
  alt_sl         String? // Slovenian
  alt_hr         String? // Croatian
  posts          Post[]
  pages          Page[]
  teachers       Teacher[]
  projectHero    Project[]      @relation("ProjectHero")
  projectGallery Project[]      @relation("ProjectGallery")
  projectPhases  ProjectPhase[]
  testimonials   Testimonial[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Project        Project?       @relation(fields: [projectId], references: [id])
  projectId      String?

  @@map("media")
}

enum MaterialType {
  PDF
  WORD
  EXCEL
  POWERPOINT
  OTHER
}

model Material {
  id             String       @id @default(uuid())
  title          String // Primary language (English)
  title_sl       String? // Slovenian
  title_hr       String? // Croatian
  description    String?      @db.Text // Primary language (English)
  description_sl String?      @db.Text // Slovenian
  description_hr String?      @db.Text // Croatian
  type           MaterialType @default(OTHER)
  url            String // URL from UploadThing
  filename       String // Original filename
  fileKey        String // UploadThing file key
  size           Int // File size in bytes
  downloads      Int          @default(0)
  published      Boolean      @default(true)
  language       String       @default("en") // Primary language (en, sl, hr)
  category       String? // Primary language (English)
  category_sl    String? // Slovenian
  category_hr    String? // Croatian
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("material")
}

// Teacher model for managing teacher profiles

model Teacher {
  id           String    @id @default(uuid())
  name         String
  title        String? // Primary language (English)
  title_sl     String? // Slovenian
  title_hr     String? // Croatian
  bio          String?   @db.Text // Primary language (English)
  bio_sl       String?   @db.Text // Slovenian
  bio_hr       String?   @db.Text // Croatian
  photo        Media?    @relation(fields: [photoId], references: [id])
  photoId      String?
  email        String?
  displayOrder Int       @default(0)
  quizzes      Quiz[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  projects     Project[]

  @@map("teacher")
}

// Quiz model for creating quizzes

model Quiz {
  id             String           @id @default(uuid())
  title          String // Primary language (English)
  title_sl       String? // Slovenian
  title_hr       String? // Croatian
  description    String?          @db.Text // Primary language (English)
  description_sl String?          @db.Text // Slovenian
  description_hr String?          @db.Text // Croatian
  teacher        Teacher          @relation(fields: [teacherId], references: [id])
  teacherId      String
  questions      Question[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Project        Project?         @relation(fields: [projectId], references: [id])
  projectId      String?
  submissions    QuizSubmission[]

  @@map("quiz")
}

// Question model for quiz questions

model Question {
  id      String   @id @default(uuid())
  text    String   @db.Text // Primary language (English)
  text_sl String?  @db.Text // Slovenian
  text_hr String?  @db.Text // Croatian
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
  options Option[] @relation("QuestionOptions")

  correctOptionId String? @unique
  correctOption   Option? @relation("CorrectAnswer", fields: [correctOptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("question")
}

// Option model for quiz answer options

model Option {
  id                    String    @id @default(uuid())
  text                  String // Primary language (English)
  text_sl               String? // Slovenian
  text_hr               String? // Croatian
  question              Question  @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId            String
  correctAnswerQuestion Question? @relation("CorrectAnswer")
  correct               Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("option")
}

model QuizSubmission {
  id        String   @id @default(uuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  score     Float
  answers   Json // Store array of answer details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
  @@index([userId])
  @@map("quiz_submission")
}

model Project {
  id             String    @id @default(uuid())
  name           String // Primary language (English)
  name_sl        String? // Slovenian
  name_hr        String? // Croatian
  slug           String    @unique
  description    String?   @db.Text // Primary language (English)
  description_sl String?   @db.Text // Slovenian
  description_hr String?   @db.Text // Croatian
  published      Boolean   @default(false)
  publishedAt    DateTime?
  featured       Boolean   @default(false)

  heroImage   Media?  @relation("ProjectHero", fields: [heroImageId], references: [id])
  heroImageId String?
  gallery     Media[] @relation("ProjectGallery")

  teachers Teacher[]
  quizzes  Quiz[]
  posts    Post[]
  pages    Page[]

  timeline ProjectPhase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Media     Media[]

  @@map("project")
}

model ProjectPhase {
  id             String    @id @default(uuid())
  title          String // Primary language (English)
  title_sl       String? // Slovenian
  title_hr       String? // Croatian
  description    String    @db.Text // Primary language (English)
  description_sl String?   @db.Text // Slovenian
  description_hr String?   @db.Text // Croatian
  startDate      DateTime?
  endDate        DateTime?
  completed      Boolean   @default(false)
  order          Int

  media   Media?  @relation(fields: [mediaId], references: [id])
  mediaId String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_phase")
}

model Testimonial {
  id         String   @id @default(uuid())
  name       String
  role       String // Primary language (English)
  role_sl    String? // Slovenian
  role_hr    String? // Croatian
  content    String   @db.Text // Primary language (English)
  content_sl String?  @db.Text // Slovenian
  content_hr String?  @db.Text // Croatian
  photo      Media?   @relation(fields: [photoId], references: [id])
  photoId    String?
  featured   Boolean  @default(false)
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("testimonial")
}