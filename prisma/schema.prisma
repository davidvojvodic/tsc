generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emailVerified   Boolean
  image           String?
  banExpires      DateTime?
  banReason       String?
  banned          Boolean?
  role            Role             @default(USER)
  Account         Account[]
  pages           Page[]
  quizSubmissions QuizSubmission[]
  Session         Session[]

  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  createdAt      DateTime @default(now())
  impersonatedBy String?
  token          String   @unique
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  createdAt             DateTime  @default(now())
  refreshTokenExpiresAt DateTime?
  scope                 String?
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Post {
  id          String    @id @default(uuid())
  title       String
  title_sl    String?
  title_hr    String?
  slug        String    @unique
  content     String
  content_sl  String?
  content_hr  String?
  excerpt     String?
  excerpt_sl  String?
  excerpt_hr  String?
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  coverId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String?
  authorName  String    @default("Admin")
  cover       Media?    @relation(fields: [coverId], references: [id])
  Project     Project?  @relation(fields: [projectId], references: [id])

  @@map("post")
}

model Page {
  id          String    @id @default(uuid())
  title       String
  title_sl    String?
  title_hr    String?
  slug        String    @unique
  content     String
  content_sl  String?
  content_hr  String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mediaId     String?
  projectId   String?
  author      User      @relation(fields: [authorId], references: [id])
  Media       Media?    @relation(fields: [mediaId], references: [id])
  parent      Page?     @relation("PageToPage", fields: [parentId], references: [id])
  children    Page[]    @relation("PageToPage")
  Project     Project?  @relation(fields: [projectId], references: [id])

  @@map("page")
}

model Media {
  id               String                     @id @default(uuid())
  filename         String
  url              String
  mimeType         String
  size             Int
  type             MediaType                  @default(OTHER)
  alt              String?
  alt_sl           String?
  alt_hr           String?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  projectId        String?
  Project          Project?                   @relation(fields: [projectId], references: [id])
  pages            Page[]
  posts            Post[]
  projectHero      Project[]                  @relation("ProjectHero")
  teachers         Teacher[]
  testimonials     Testimonial[]
  projectGallery   Project[]                  @relation("ProjectGallery")
  activities       ProjectActivityToMedia[]

  @@map("media")
}

model Material {
  id             String       @id @default(uuid())
  title          String
  title_sl       String?
  title_hr       String?
  description    String?
  description_sl String?
  description_hr String?
  type           MaterialType @default(OTHER)
  url            String
  filename       String
  fileKey        String
  size           Int
  downloads      Int          @default(0)
  published      Boolean      @default(true)
  category       String?
  category_sl    String?
  category_hr    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  language       String       @default("en")
  activities     ProjectActivityToMaterial[]

  @@map("material")
}

model Teacher {
  id           String                        @id @default(uuid())
  name         String
  title        String?
  title_sl     String?
  title_hr     String?
  bio          String?
  bio_sl       String?
  bio_hr       String?
  photoId      String?
  email        String?
  displayOrder Int                           @default(0)
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  school       String?
  quizzes      Quiz[]
  photo        Media?                        @relation(fields: [photoId], references: [id])
  projects     Project[]                     @relation("ProjectToTeacher")
  activities   ProjectActivityToTeacher[]

  @@map("teacher")
}

model Quiz {
  id             String           @id @default(uuid())
  title          String
  title_sl       String?
  title_hr       String?
  description    String?
  description_sl String?
  description_hr String?
  teacherId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  projectId      String?
  questions      Question[]
  Project        Project?         @relation(fields: [projectId], references: [id])
  teacher        Teacher          @relation(fields: [teacherId], references: [id])
  submissions    QuizSubmission[]

  @@map("quiz")
}

model Question {
  id              String   @id @default(uuid())
  text            String
  text_sl         String?
  text_hr         String?
  quizId          String
  correctOptionId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  options         Option[] @relation("QuestionOptions")
  correctOption   Option?  @relation("CorrectAnswer", fields: [correctOptionId], references: [id])
  quiz            Quiz     @relation(fields: [quizId], references: [id])

  @@map("question")
}

model Option {
  id                    String    @id @default(uuid())
  text                  String
  text_sl               String?
  text_hr               String?
  questionId            String
  correct               Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  question              Question  @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  correctAnswerQuestion Question? @relation("CorrectAnswer")

  @@map("option")
}

model QuizSubmission {
  id        String   @id @default(uuid())
  quizId    String
  userId    String
  score     Float
  answers   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([quizId])
  @@index([userId])
  @@map("quiz_submission")
}

model Project {
  id             String         @id @default(uuid())
  name           String
  name_sl        String?
  name_hr        String?
  slug           String         @unique
  description    String?
  description_sl String?
  description_hr String?
  published      Boolean        @default(false)
  publishedAt    DateTime?
  featured       Boolean        @default(false)
  heroImageId    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Media          Media[]
  pages          Page[]
  posts          Post[]
  heroImage      Media?         @relation("ProjectHero", fields: [heroImageId], references: [id])
  timeline       ProjectPhase[]
  quizzes        Quiz[]
  gallery        Media[]        @relation("ProjectGallery")
  teachers       Teacher[]      @relation("ProjectToTeacher")

  @@map("project")
}

model ProjectPhase {
  id             String            @id @default(uuid())
  title          String
  title_sl       String?
  title_hr       String?
  startDate      DateTime?
  endDate        DateTime?
  completed      Boolean           @default(false)
  order          Int
  projectId      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  activities     ProjectActivity[]

  @@map("project_phase")
}

model Testimonial {
  id         String   @id @default(uuid())
  name       String
  role       String
  role_sl    String?
  role_hr    String?
  content    String
  content_sl String?
  content_hr String?
  photoId    String?
  featured   Boolean  @default(false)
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  photo      Media?   @relation(fields: [photoId], references: [id])

  @@map("testimonial")
}

model ProjectActivity {
  id             String                        @id @default(uuid())
  title          String                        // Primary language (English)
  title_sl       String?                       // Slovenian
  title_hr       String?                       // Croatian
  description    String                        @db.Text // Primary language (English)
  description_sl String?                       @db.Text // Slovenian
  description_hr String?                       @db.Text // Croatian
  order          Int                           @default(0)
  
  // Phase this activity belongs to
  phase          ProjectPhase                  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId        String
  
  // Many-to-many relationships
  teachers       ProjectActivityToTeacher[]
  images         ProjectActivityToMedia[]
  materials      ProjectActivityToMaterial[]
  
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt
  
  @@map("project_activity")
}

// Junction table for ProjectActivity to Teacher many-to-many relationship
model ProjectActivityToTeacher {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  teacher    Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  String
  createdAt  DateTime        @default(now())

  @@unique([activityId, teacherId])
  @@map("project_activity_to_teacher")
}

// Junction table for ProjectActivity to Media many-to-many relationship
model ProjectActivityToMedia {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  media      Media           @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId    String
  createdAt  DateTime        @default(now())

  @@unique([activityId, mediaId])
  @@map("project_activity_to_media")
}

// Junction table for ProjectActivity to Material many-to-many relationship
model ProjectActivityToMaterial {
  id         String          @id @default(uuid())
  activity   ProjectActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  material   Material        @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId String
  createdAt  DateTime        @default(now())

  @@unique([activityId, materialId])
  @@map("project_activity_to_material")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum MediaType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum MaterialType {
  PDF
  WORD
  EXCEL
  POWERPOINT
  OTHER
}
